{"ast":null,"code":"//引用echarts\nimport * as echarts from 'echarts';\nexport default {\n  name: \"personnelVisualizationMain\",\n  data() {\n    return {\n      trafficList: [],\n      trafficDay: [],\n      day: [],\n      moth: [],\n      year: []\n    };\n  },\n  props: {},\n  methods: {\n    //将前端收到的date数据转换成标准格式\n    changeTime(date) {\n      let newDate = date.substring(0, 8);\n      let date1 = date.substring(8, 10);\n      let date2 = (parseInt(date1) + 1).toString();\n      let newTime = newDate + date2;\n      return newTime;\n    },\n    getTrafficList: function () {\n      this.$axios.get(this.$httpUrl + '/visualization/listTraffic').then(res => res.data).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          for (const item of res.data) {\n            // item.date = item.date.substring(0,10);\n            item.date = this.changeTime(item.date);\n          }\n          this.trafficList = res.data;\n          //获取时间数组\n          for (let i = 0; i < res.total; i++) {\n            this.trafficDay[i] = res.data[i].date;\n          }\n          console.log(this.trafficDay);\n          for (let i = 0; i < res.total; i++) {\n            this.day[i] = res.data[i].daynumber;\n          }\n          console.log(this.day);\n          for (let i = 0; i < res.total; i++) {\n            this.moth[i] = res.data[i].mothnumber;\n          }\n          console.log(this.moth);\n          for (let i = 0; i < res.total; i++) {\n            this.year[i] = res.data[i].yearnumber;\n          }\n          console.log(this.year);\n        } else {\n          alert(\"数据获取失败\");\n        }\n      });\n    }\n    // getDay(){\n    //   for (let i = 0; i<this.trafficList.length; i++){\n    //     this.trafficDay[i] = this.trafficList[i].date.substring(8,10);\n    //     console.log(this.trafficDay);\n    //   }\n    // }\n  },\n\n  mounted() {\n    this.getTrafficList();\n    let myEcharts = echarts.init(document.getElementById(\"myChart\"));\n    //设置参数\n    myEcharts.setOption({\n      title: {\n        //echarts的标题\n        text: '游客日流量图'\n      },\n      xAxis: {\n        type: 'category',\n        data: this.trafficDay\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        //系列\n        name: '游客日流量图',\n        type: 'line',\n        data: day\n      }]\n    });\n  }\n};","map":{"version":3,"names":["echarts","name","data","trafficList","trafficDay","day","moth","year","props","methods","changeTime","date","newDate","substring","date1","date2","parseInt","toString","newTime","getTrafficList","$axios","get","$httpUrl","then","res","console","log","code","item","i","total","daynumber","mothnumber","yearnumber","alert","mounted","myEcharts","init","document","getElementById","setOption","title","text","xAxis","type","yAxis","series"],"sources":["src/components/visualization/personnelVisualizationMain.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"myChart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//引用echarts\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"personnelVisualizationMain\",\r\n  data() {\r\n    return {\r\n      trafficList:[],\r\n      trafficDay:[],\r\n      day:[],\r\n      moth:[],\r\n      year:[]\r\n    }\r\n  },\r\n  props: {\r\n\r\n  },\r\n  methods: {\r\n    //将前端收到的date数据转换成标准格式\r\n    changeTime(date) {\r\n      let newDate = date.substring(0, 8);\r\n      let date1 = date.substring(8,10);\r\n      let date2 = (parseInt(date1) + 1).toString();\r\n      let newTime = newDate + date2;\r\n      return newTime;\r\n    },\r\n    getTrafficList: function () {\r\n      this.$axios.get(this.$httpUrl+'/visualization/listTraffic')\r\n          .then(res=>res.data).then(res=>{\r\n            console.log(res);\r\n            if(res.code==200){\r\n              for (const item of res.data){\r\n                // item.date = item.date.substring(0,10);\r\n                item.date = this.changeTime(item.date);\r\n              }\r\n              this.trafficList = res.data;\r\n              //获取时间数组\r\n              for (let i = 0; i<res.total; i++){\r\n                this.trafficDay[i] = res.data[i].date;\r\n              }\r\n              console.log(this.trafficDay);\r\n              for (let i = 0; i<res.total; i++){\r\n                this.day[i] = res.data[i].daynumber;\r\n              }\r\n              console.log(this.day);\r\n              for (let i = 0; i<res.total; i++){\r\n                this.moth[i] = res.data[i].mothnumber;\r\n              }\r\n              console.log(this.moth);\r\n              for (let i = 0; i<res.total; i++){\r\n                this.year[i] = res.data[i].yearnumber;\r\n              }\r\n              console.log(this.year);\r\n            }else {\r\n              alert(\"数据获取失败\");\r\n            }\r\n      });\r\n    },\r\n    // getDay(){\r\n    //   for (let i = 0; i<this.trafficList.length; i++){\r\n    //     this.trafficDay[i] = this.trafficList[i].date.substring(8,10);\r\n    //     console.log(this.trafficDay);\r\n    //   }\r\n    // }\r\n  },\r\n  mounted() {\r\n    this.getTrafficList();\r\n    let myEcharts = echarts.init(document.getElementById(\"myChart\"));\r\n        //设置参数\r\n        myEcharts.setOption({\r\n          title:{//echarts的标题\r\n            text:'游客日流量图'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: this.trafficDay\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          series: [{//系列\r\n            name:'游客日流量图',\r\n            type:'line',\r\n            data:day\r\n          }]\r\n        });\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n #myChart {\r\n   width: 500px;\r\n   height: 500px;;\r\n   border: 1px #000 solid;\r\n }\r\n</style>"],"mappings":"AAOA;AACA,YAAAA,OAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,UAAA;MACAC,GAAA;MACAC,IAAA;MACAC,IAAA;IACA;EACA;EACAC,KAAA,GAEA;EACAC,OAAA;IACA;IACAC,WAAAC,IAAA;MACA,IAAAC,OAAA,GAAAD,IAAA,CAAAE,SAAA;MACA,IAAAC,KAAA,GAAAH,IAAA,CAAAE,SAAA;MACA,IAAAE,KAAA,IAAAC,QAAA,CAAAF,KAAA,OAAAG,QAAA;MACA,IAAAC,OAAA,GAAAN,OAAA,GAAAG,KAAA;MACA,OAAAG,OAAA;IACA;IACAC,cAAA,WAAAA,CAAA;MACA,KAAAC,MAAA,CAAAC,GAAA,MAAAC,QAAA,iCACAC,IAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAtB,IAAA,EAAAqB,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,IAAAA,GAAA,CAAAG,IAAA;UACA,WAAAC,IAAA,IAAAJ,GAAA,CAAAtB,IAAA;YACA;YACA0B,IAAA,CAAAjB,IAAA,QAAAD,UAAA,CAAAkB,IAAA,CAAAjB,IAAA;UACA;UACA,KAAAR,WAAA,GAAAqB,GAAA,CAAAtB,IAAA;UACA;UACA,SAAA2B,CAAA,MAAAA,CAAA,GAAAL,GAAA,CAAAM,KAAA,EAAAD,CAAA;YACA,KAAAzB,UAAA,CAAAyB,CAAA,IAAAL,GAAA,CAAAtB,IAAA,CAAA2B,CAAA,EAAAlB,IAAA;UACA;UACAc,OAAA,CAAAC,GAAA,MAAAtB,UAAA;UACA,SAAAyB,CAAA,MAAAA,CAAA,GAAAL,GAAA,CAAAM,KAAA,EAAAD,CAAA;YACA,KAAAxB,GAAA,CAAAwB,CAAA,IAAAL,GAAA,CAAAtB,IAAA,CAAA2B,CAAA,EAAAE,SAAA;UACA;UACAN,OAAA,CAAAC,GAAA,MAAArB,GAAA;UACA,SAAAwB,CAAA,MAAAA,CAAA,GAAAL,GAAA,CAAAM,KAAA,EAAAD,CAAA;YACA,KAAAvB,IAAA,CAAAuB,CAAA,IAAAL,GAAA,CAAAtB,IAAA,CAAA2B,CAAA,EAAAG,UAAA;UACA;UACAP,OAAA,CAAAC,GAAA,MAAApB,IAAA;UACA,SAAAuB,CAAA,MAAAA,CAAA,GAAAL,GAAA,CAAAM,KAAA,EAAAD,CAAA;YACA,KAAAtB,IAAA,CAAAsB,CAAA,IAAAL,GAAA,CAAAtB,IAAA,CAAA2B,CAAA,EAAAI,UAAA;UACA;UACAR,OAAA,CAAAC,GAAA,MAAAnB,IAAA;QACA;UACA2B,KAAA;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;;EACAC,QAAA;IACA,KAAAhB,cAAA;IACA,IAAAiB,SAAA,GAAApC,OAAA,CAAAqC,IAAA,CAAAC,QAAA,CAAAC,cAAA;IACA;IACAH,SAAA,CAAAI,SAAA;MACAC,KAAA;QAAA;QACAC,IAAA;MACA;MACAC,KAAA;QACAC,IAAA;QACA1C,IAAA,OAAAE;MACA;MACAyC,KAAA;QACAD,IAAA;MACA;MACAE,MAAA;QAAA;QACA7C,IAAA;QACA2C,IAAA;QACA1C,IAAA,EAAAG;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}