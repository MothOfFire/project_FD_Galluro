{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//引用echarts\nimport * as echarts from 'echarts';\nexport default {\n  name: \"personnelVisualizationMain\",\n  data() {\n    return {\n      trafficList: [],\n      trafficDay: [],\n      day: [],\n      moth: [],\n      year: [],\n      total: []\n    };\n  },\n  methods: {\n    //将前端收到的date数据转换成标准格式\n    changeTime(date) {\n      let date0 = date.substring(0, 8);\n      let date1 = date.substring(8, 10);\n      let date2 = (parseInt(date1) + 1).toString();\n      let newDate = date0 + date2;\n      return newDate;\n    },\n    getTrafficList() {\n      this.$axios.get(this.$httpUrl + '/visualization/listTraffic').then(res => res.data).then(res => {\n        // console.log(res);\n        if (res.code == 200) {\n          for (const item of res.data) {\n            item.date = this.changeTime(item.date);\n          }\n          this.trafficList = res.data;\n          //获取数组\n          for (let i = 0; i < res.total; i++) {\n            this.trafficDay.push(res.data[i].date);\n            this.day.push(res.data[i].daynumber);\n            this.moth.push(res.data[i].mothnumber);\n            this.year.push(res.data[i].yearnumber);\n          }\n          this.getTrafficChart();\n        } else {\n          alert(\"数据获取失败\");\n        }\n      });\n    },\n    getTrafficChart() {\n      let trafficEcharts = echarts.init(document.getElementById(\"trafficChart\"));\n      let option = {\n        title: {\n          //echarts的标题\n          text: '游客人流量图'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: ['日人流量', '月人流量', '年人流量']\n        },\n        xAxis: {\n          type: 'category',\n          data: this.trafficDay\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          //系列\n          name: '日人流量',\n          type: 'line',\n          //stack:\"traffic\",//设置这个会导致折线图不准确\n          data: this.day,\n          //样式填充\n          areaStyle: {},\n          //设置高亮\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          name: '月人流量',\n          type: 'line',\n          //stack:\"traffic\",\n          data: this.moth,\n          //样式填充\n          areaStyle: {},\n          //设置高亮\n          emphasis: {\n            focus: 'series'\n          }\n        }, {\n          name: '年人流量',\n          type: 'line',\n          //stack:\"traffic\",\n          data: this.year,\n          //样式填充\n          areaStyle: {},\n          //设置高亮\n          emphasis: {\n            focus: 'series'\n          }\n        }]\n      };\n      trafficEcharts.setOption(option);\n    },\n    getEmployeeTotal() {\n      this.$axios.get(this.$httpUrl + '/visualization/employeeTotal').then(res => res.data).then(res => {\n        if (res.code == 200) {\n          //获取数组,i取的是键\n          for (let i in res.data) {\n            let vist = {\n              value: res.data[i],\n              name: i\n            };\n            this.total.push(vist);\n          }\n          // console.log(res.data.keys());\n          console.log(this.total);\n          this.getEmployeeChart();\n        } else {\n          alert(\"数据获取失败\");\n        }\n      });\n    },\n    getEmployeeChart() {\n      let employeeEcharts = echarts.init(document.getElementById(\"employeeChart\"));\n      let option = {\n        title: {\n          //echarts的标题\n          text: '园区人员分布图'\n        },\n        tooltip: {\n          //数据触发类型\n          trigger: 'item' //图形触发\n        },\n\n        legend: {\n          top: '5%',\n          left: 'center'\n        },\n        series: [{\n          name: 'Access From',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          avoidLabelOverlap: false,\n          itemStyle: {\n            borderRadius: 10,\n            borderColor: '#fff',\n            borderWidth: 2\n          },\n          label: {\n            show: false,\n            position: 'center'\n          },\n          emphasis: {\n            label: {\n              show: true,\n              fontSize: 40,\n              fontWeight: 'bold'\n            }\n          },\n          labelLine: {\n            show: false\n          },\n          data: this.total\n        }]\n      };\n      employeeEcharts.setOption(option);\n    }\n  },\n  beforeMount() {\n    this.getTrafficList();\n    this.getEmployeeTotal();\n  }\n};","map":{"version":3,"names":["echarts","name","data","trafficList","trafficDay","day","moth","year","total","methods","changeTime","date","date0","substring","date1","date2","parseInt","toString","newDate","getTrafficList","$axios","get","$httpUrl","then","res","code","item","i","push","daynumber","mothnumber","yearnumber","getTrafficChart","alert","trafficEcharts","init","document","getElementById","option","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","xAxis","yAxis","series","areaStyle","emphasis","focus","setOption","getEmployeeTotal","vist","value","console","log","getEmployeeChart","employeeEcharts","top","left","radius","avoidLabelOverlap","itemStyle","borderRadius","borderColor","borderWidth","show","position","fontSize","fontWeight","labelLine","beforeMount"],"sources":["src/components/visualization/personnelVisualizationMain.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"trafficChart\"></div>\r\n    <div id=\"employeeChart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//引用echarts\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"personnelVisualizationMain\",\r\n  data() {\r\n    return {\r\n      trafficList:[],\r\n      trafficDay:[],\r\n      day:[],\r\n      moth:[],\r\n      year:[],\r\n      total:[]\r\n    }\r\n  },\r\n  methods: {\r\n    //将前端收到的date数据转换成标准格式\r\n    changeTime(date) {\r\n      let date0 = date.substring(0, 8);\r\n      let date1 = date.substring(8,10);\r\n      let date2 = (parseInt(date1) + 1).toString();\r\n      let newDate = date0 + date2;\r\n      return newDate;\r\n    },\r\n    getTrafficList() {\r\n      this.$axios.get(this.$httpUrl+'/visualization/listTraffic')\r\n          .then(res=>res.data).then(res=>{\r\n            // console.log(res);\r\n            if(res.code==200){\r\n              for (const item of res.data){\r\n                item.date = this.changeTime(item.date);\r\n              }\r\n              this.trafficList = res.data;\r\n              //获取数组\r\n              for (let i = 0; i<res.total; i++){\r\n                this.trafficDay.push(res.data[i].date);\r\n                this.day.push(res.data[i].daynumber);\r\n                this.moth.push(res.data[i].mothnumber);\r\n                this.year.push(res.data[i].yearnumber);\r\n              }\r\n              this.getTrafficChart();\r\n            }else {\r\n              alert(\"数据获取失败\");\r\n            }\r\n      });\r\n    },\r\n    getTrafficChart() {\r\n      let trafficEcharts = echarts.init(document.getElementById(\"trafficChart\"));\r\n      let option = {\r\n        title:{//echarts的标题\r\n          text:'游客人流量图'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#6a7985'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['日人流量', '月人流量', '年人流量'],\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: this.trafficDay\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {//系列\r\n            name:'日人流量',\r\n            type:'line',\r\n            //stack:\"traffic\",//设置这个会导致折线图不准确\r\n            data:this.day,\r\n            //样式填充\r\n            areaStyle:{},\r\n            //设置高亮\r\n            emphasis: {\r\n              focus:'series'\r\n            }\r\n          },\r\n          {\r\n            name:'月人流量',\r\n            type:'line',\r\n            //stack:\"traffic\",\r\n            data:this.moth,\r\n            //样式填充\r\n            areaStyle:{},\r\n            //设置高亮\r\n            emphasis: {\r\n              focus:'series'\r\n            }\r\n          },\r\n          {\r\n            name:'年人流量',\r\n            type:'line',\r\n            //stack:\"traffic\",\r\n            data:this.year,\r\n            //样式填充\r\n            areaStyle:{},\r\n            //设置高亮\r\n            emphasis: {\r\n              focus:'series'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      trafficEcharts.setOption(option);\r\n    },\r\n    getEmployeeTotal() {\r\n      this.$axios.get(this.$httpUrl+'/visualization/employeeTotal')\r\n          .then(res=>res.data).then(res=>{\r\n        if(res.code==200){\r\n          //获取数组,i取的是键\r\n          for(let i in res.data) {\r\n            let vist = {\r\n              value: res.data[i],\r\n              name: i\r\n            }\r\n            this.total.push(vist);\r\n          }\r\n          // console.log(res.data.keys());\r\n          console.log(this.total);\r\n          this.getEmployeeChart();\r\n        }else {\r\n          alert(\"数据获取失败\");\r\n        }\r\n      });\r\n    },\r\n    getEmployeeChart() {\r\n      let employeeEcharts = echarts.init(document.getElementById(\"employeeChart\"));\r\n      let option = {\r\n        title:{//echarts的标题\r\n          text:'园区人员分布图'\r\n        },\r\n        tooltip: {//数据触发类型\r\n          trigger: 'item'//图形触发\r\n        },\r\n        legend: {\r\n          top: '5%',\r\n          left: 'center',\r\n        },\r\n        series: [\r\n          {\r\n            name: 'Access From',\r\n            type: 'pie',\r\n            radius: ['40%', '70%'],\r\n            avoidLabelOverlap: false,\r\n            itemStyle: {\r\n              borderRadius: 10,\r\n              borderColor: '#fff',\r\n              borderWidth: 2\r\n            },\r\n            label: {\r\n              show: false,\r\n              position: 'center'\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                show: true,\r\n                fontSize: 40,\r\n                fontWeight: 'bold'\r\n              }\r\n            },\r\n            labelLine: {\r\n              show: false\r\n            },\r\n            data: this.total\r\n          }\r\n        ]\r\n      }\r\n      employeeEcharts.setOption(option);\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.getTrafficList();\r\n    this.getEmployeeTotal();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n #trafficChart {\r\n   width: 500px;\r\n   height: 500px;;\r\n   border: 1px #000 solid;\r\n   float: left;\r\n   margin-left: 5%;\r\n }\r\n #employeeChart {\r\n   width: 500px;\r\n   height: 500px;;\r\n   border: 1px #000 solid;\r\n   float: right;\r\n   margin-right: 5%;\r\n }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}